cmd
java -version

Main.java

public class Main{
	public static void main(String[] args){
		System.out.println("Hello world!");
	}
}

javac Main.java


5,2 => 5.2
D:\AR
D:\AR\chet

%d - для целочисленных значений
%s - для строк
%f - для вещественных чисел
%c - для отдельного символа (тип char)

258
0000 0001 0000 0010
2
		  0000 0010
		  
		  
0-9

ворона
1
вороны
2 3 4
ворон
0 5 6 7 8 9 

копейка
1 21 31 91

копейки
2 92
3 93
4 94
копеек
5 6 7 8 9 

11
12
13
14

Введите номер месяца: (1-12)

Зима
Весна
Лето
Осень

Ошибка ввода данных

5 - 10, 11, 12
4 - 7, 8, 9
3 - 4, 5, 6
2 - 1, 2, 3

условие ? true : false
				 условие ? true : false
								  условие ? true : false
													условие ? true : false
													
1 2 3 4 5
1 3 5  =  9
	
1 + 5 < 3	

6\n
апвапва\n
6


Math.random() * (max-min) + min;

Рекурсия

i = 2
array[i] - текущий элемент
array[i + 1] - следующий элемент

5! = 1*2*3*4*5 = 120

int -> Integer

String

StringBuilder
StringBuffer

git --version
git --help


git init
- создание репозитория (один раз для одного репозитория)

git status
- состояние репозитория

git add -A
		-A, --all - все файлы, которые находятся в папке и всех подпапках
		Main.java - добавяет Main.java
		. - добавяет все файлы из текущей директории
		
git config --global user.name 'new user'
		   --local
		
git config --global user.email 'test@mail.ru'

git commit -m "first commit"
- cоздание контрольной точки


git branch
- просмотр веток

git branch test
git branch readme
- создание новой ветки

git branch -D test
- удаление ветки

git checkout readme
git checkout master
- переход на ветку

readme.md

master          ->      readme 
	- readme.md	<-	   - readme.md

		->  ...

git merge readme

git log
Q q


токен

Win + R => control
Диспечер учетных записей
Добавить общие учетные записи


https://github.com
Helen-prog

1) git init
2) git add .
3) git commit -m "change Main"
4) git remote add origin https://github.com/Helen-prog/Java313.git
5) git push -u origin master

5e254cbb79aca65900e4f4a64a007cb4b7e22bb2


0) git status

1) git add .
2) git commit -m "change Main"
3) git push
- переносим контрольную точку с локального репозитория на удаленный репозиторий


git clone https://github.com/Helen-prog/Java313.git

git pull
- забираем изменения с удаленного репозитория на локальный

Program.java


1) cвойства, поля (переменные)
2) методы

Конструкторы
Инкапсуляция (set, get)

person_data
	Human
	Main
	
rect
	Main.java
	Rectangle.java
	
rand.nextInt(max - min) + min
rand.nextInt(max - min + 1) + min

groups
	Main.java
	Student.java
	

static

number
	Number.java
	Main.java


5! = 1*2*3*4*5 = 120

Вложенные (внутренние) классы

Наследование
- родительский, базовый, суперкласс
- потомок, дочерний, производный

calc
	Test.java
	Calculation.java
	MyCalculation.java
	
https://discord.gg/YGapGeMK
https://meet.google.com/qgf-wqpb-ofv

shape
	Main.java
	Figure.java
	Rectangle.java
	
area_box
	Main.java
	Box.java
	Box3D.java
	
	
Абстрактные классы

Интерфейсы


Lambda выражения

Динамические структуры данных

JavaCollectionFramework

LIFO (last in - first out) - стек
FIFO (first in - first out) - очередь

Comparable
Comparator



mas = [5,6,8,9,5]

HashMap:
int - хеш
K - ключ
V - значение
Node - следующий элемент

{
int hash = 1042
Key key = {"Виталий"}
Integer value = 20
Node next = null
}


Streem API 




MVC — это именно набор архитектурных
идей и принципов для построения сложных систем с пользовательским интерфейсом. 

MVC (Model, View, Controller)

Model — так называемая модель. Она содержит всю
бизнес-логику приложения.

View — вид. Данный модуль отвечает за отображение данных пользователю. Все, что видит пользователь, генерируется видом.

Controller - контроллер. В нем хранится код,
который отвечает за обработку действий пользователя (любое действие пользователя в системе обрабатывается в контроллере). 

MVC.bat

wait() - состояние ожидание

notify() - продолжате работу потока
notifyAll() - возобновляет работу всех потоков


5 - 10, 11, 12
4 - 7, 8, 9
3 - 4, 5, 6


SHOW DATABASES;
CREATE DATABASE users;

USE users;
CREATE TABLE users (id integer auto_increment primary key, name varchar(30), age integer);
INSERT INTO users (name, age) VALUES ('Tom', 34);

SELECT * FROM users;
DROP DATABASE users;

quit


CREATE DATABASE [IF NOT EXISTS] имя_базы_данных;

CREATE DATABASE IF NOT EXISTS test;

CREATE TABLE [IF NOT EXISTS] название_таблицы 
	(навзание_столбца1 тип_данных атрибуты_столбца1,
	навзание_столбца2 тип_данных атрибуты_столбца2,
	...,
	навзание_столбцаN тип_данных атрибуты_столбцаN);
	
DROP TABLE имя_таблицы;
DROP TABLE staff;

DROP DATABASE [IF EXISTS] имя_БД;
DROP DATABASE IF EXISTS test;


SELECT [ALL | DISTINCT] {* | столбец_1 [, столбец_n]}
FROM таблица_1 [, таблица_n]
WHERE условие
	операторы сравнения
	AND OR
	[NOT] BETWEEN начальное_значение AND конечное_значение
	[NOT] LIKE шаблон_строки
		% - любое количество символов или их отсутствие
		_ - один любой символ
	IS NULL
	[NOT] REGEXP регулярное_выражени
		^ - указывает на начало строки
		$ - указывает на конец строки
		. - один любой символ
		[символы] - один любой символ из перечисленных
		[начальный_символ-конечный_символ] - один любой символ из указанного диапазона
		| - отделяет два шаблона строки, значение должно соответствовать одному из этих шаблонов
	[NOT] IN (набор_значений | выражения)
	
	EXISTS (существует)
GROUP BY (группировать по) имя_поля
HAVING условие
ORDER BY {имя_поля | номер_поля [ASC | DESC]}	
LIMIT кол-во_записей OFFSET смещение
	LIMIT [смещение,] кол-во_записей
	

INSERT - добвление новой строки в БД
UPDATE - изменение строки в БД
DELETE - удаление строки из БД


INSERT INTO имя_таблицы [(столбец_1 [, столбец_n])]
VALUES (значение_1 [, значение_n])


INSERT INTO имя_таблицы [(столбец_1 [, столбец_n])]
SELECT список_столбцов
FROM список_таблиц
WHERE условие


UPDATE имя_таблицы
SET столбец_1 = значение_1 [, столбец_n = значение_n] 
WHERE условие

DELETE FROM имя_таблицы
WHERE уловие


Логическая базы данных
Физическая база данных

Функции агрегирования
SUM (только числовые типы данных)
AVG (только числовые типы данных)
COUNT
MIN
MAX

Строковые функции:

concat() - объединяет несколько полей в одно

concat_ws("символ_разделитель", набор_полей) - объединяет несколько полей в одно

insert(поле, позиция, количество, символ_для_замены) - поиск и замена

lpad(поле, длина, символ_заполнитель) - выравниваение элементов, с добавлением слева сивола заполнителя

lower(поле) - перевод в нижний регистр

upper(поле) - перевод в верхний регистр

length(поле) - длина строки

replace(поле, что_ищем, на_что_заменяем) - поиск и замена

reverse(поля) - реверс строки

ltrim(поля) - удаляет пробелы слева
rtrim(поля) - удаляет пробелы справа
trim(поля) - удаляет пробелы и слева и справа

Функции даты и времени

curdate() - возвращает текущую дату
curtime() - возвращает текущее время
now() - возвращает текущую дату и время


adddate(поле, interval -1 DAY)

DAY - день
WEEK - неделя
MONTH - месяц
QUARTER - квартал
YEAR - год

Подзапросы (вложенные_запросы)
- однострочный (>, <, =, <>, !=, >=, <=)
- многострочный (IN, NOT IN)


UNION
UNION ALL


SELECT столбецы
FROM таблица_1 [INNER] JOIN таблица_2 ON условие

SELECT столбецы
FROM таблица_1 LEFT [RIGHT] JOIN таблица_2 ON условие

Хранимые процедуры

CREATE PROCEDURE имя_процедуры (параметры)
	begin
		операторы
	end
	

DELIMITER //
CREATE PROCEDURE ins_cust(n CHAR(50), e CHAR(50))
	begin
		INSERT INTO customers (name, email) VALUE(n, e);
	end	
//

call ins_cust('Сычов Валерий', 'valeriy@gmail')//

IF...ELSEIF...ELSE...END IF;

CREATE PROCEDURE имя_процедуры (параметры)
	begin
		IF (условие) THEN
			запрос 1;
		ELSEIF(условие) THEN
			запрос 2;
		ELSE
			запрос 3;
		END IF;
	end
	
	
WHILE, REPEAT, LOOP

WHILE условие DO
	запрос
END WHILE


REPEAT
	запрос
UNTIL условие
END REPEAT

[label_name:] LOOP
	запрос
END LOOP [label_name]




index.html

align="left | center | right | justify"

<!-- комментарий -->

H20

file:///D:/Java313/HTML/%D0%BD%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82.html

file:///D:/Java313/HTML/index.html

Ctrl + H

align="
style="text-align:

#0000ff => #00f
00 - red
00 - green
ff - blue
0-9A-F
#050586

rgb(255, 0, 0)

Типы изображений:
- растровые
	- *.jpg (*.jpeg)
	- *.png
	- *.gif
- векторные
	- *.svg
	
style.css

file:///D:/Java313/HTML/%D0%93%D0%B8%D0%BF%D0%B5%D1%80%D1%81%D1%81%D1%8B%D0%BB%D0%BA%D0%B8/test.html#page




file:///D:/Java313/HTML/form/form.html

file:///D:/Java313/HTML/form/file.php?name=Olga&psw=123456

file:///D:/Java313/HTML/form/form.html?name=Igor&psw=123&pol=on#file.php

file:///D:/Java313/HTML/form/form.html#file.php

file:///D:/Java313/HTML/form/form.html?name=Olga&psw=12345#file.php

file:///D:/Java313/HTML/form/form.html?name=Olga&psw=123456&x=81&y=42#file.php

file:///D:/Java313/HTML/form/form.html?day=6&name=&psw=&x=76&y=40#file.php

script.js

Типы данных

string
number
boolean

undefined
null -> object

Object

FALSE: 0, 0.0, "", false, undefined, null, NaN


file:///D:/Java313/JavaScript/index.html?name1=Igor#test.php

http://f1012311.xsph.ru/

cs
	Server.java
	Client.java
	
	
TCP (Transmission Control Protocol) 
UDP (User Datagram Protocol)

DatagramSocket
DatagramPacket

udp
	Sender.java
	Received.java


JDBC (Java Data Connectivity) - соединение с базами данных на Java

CREATE DATABASE users; 

executeQuery() - SELECT
executeUpdate() - CREATE, UPDATE, DROP, DELETE, INSERT 
execute()

example
	ReservationSystem.java


PreparedStatment



jackson core

MVC

jakarta serlet

JAVA EE - Java Enterprise Edition

Jakarta EE 

Сервлет
http://localhost:8080/hello-servlet

http://localhost:8080/second?param1=30&param2=11&age=18&name=Andrey&name=Petr


<input type="text" name="param1">


http://localhost:8080/firstpost.html

BookWebApp

mysql connector

RegisterServlet
BookListServlet


JSP (Java (Jakarta) Server Page)

JSP Scriplet
<% %>

JSP Declaration
<%! %>

JSP директивы
<%@ page import="..." %>

Expression Language (EL)
${}


http://localhost:8080/output.jsp?name1=%D0%9E%D0%BB%D1%8C%D0%B3%D0%B0

http://localhost:8080/output.jsp?name1=Olga

Java Bean:

- модификаторы доспупа все private
- конструктор без параметров и его теле ничего нет
- get, set

JSTL - Jakarta Standard Tag Library 

Jakarta Standard Tag Library Implementation
Jakarta Standard Tag Library API

<%@ taglib prefix="c" uri="jakarta.tags.core" %>
<%@ taglib prefix="fmt" uri="jakarta.tags.formatting" %>
<%@ taglib prefix="sql" uri="jakarta.tags.sql" %>
<%@ taglib prefix="x" uri="jakarta.tags.xml" %>
<%@ taglib prefix="fn" uri="jakarta.tags.functions" %>


IoC - Inversion of Control (инверсия управления) — это некий абстрактный принцип, набор рекомендаций для написания слабо связанного кода. 

DI - Dependency Injection (внедрение зависимостей)

Bean — это объект какого-либо класса, который создается, собирается и управляется контейнером Spring IoC.


file:///D:/Lessons/XAMPP/htdocs/ajax/index.html?oldPassword=123&newPassword=456&uid=2

spring Context

XML file (устаревший способ)
Annotation + XML file
Java Code

Spring Bean - это объект, который создается и управляется Spring Container

applicationContext - представляет собой Spring Container

Способы внедрения зависимостей:
- с помощью конструктора
- с помощью сеттеров
- Autowiring
	- конструктора
	- сеттер
	- поля

myApp.properties

bean scope:
- singletone
- prototype

class Cat               -> cat
class MyCat             -> myCat 
class SQLTest           -> SQLTest


Spring MVC — это компонент или шаблон проектирования Spring Framework, который позволяет разрабатывать веб-приложения на Java с использованием архитектуры Model — View — Controller.

Model — подразумевает логику работы с данными (контейнер для хранения даннях)
View — логика интерфейса (внешний вид)
Controller — логика обработки запросов (центр управления, могз Spring MVC)

Controller получает данные из Model и затем эти данные отображает во View (представлении)

Controller (DispatcherServlet)

DAO (Data Access Object) - отправка запросов к базе данных (специализированный класса, который принято выносить в отдельный DAO-слой приложения)

hibernate.cfg.xml

HQL (Hibernate Query Language)

Создать БД, в ней три таблицы (связь ManyToMany). 
С использовании Hibernate создать возможностью 
добавления данных в БД, вывода
информации из нее и удаления данных.


Создать To-Do List приложение с использованием Spring MVC



One-to-One (один к одному)
One-to-Many (один ко многим)
Many-to-One (многие к одному)
Many-to-Many (многие ко многим)


Uni-directional - это отношения, когда одна сторона о них не знает
Bi-directional - это отношения, когда обе сторны знают друг о друге

git clone 

children      section
1             2
1             3
2             1
2             2

Thymeleaf
${...} - Variable Expression
*{...} - Selection Expression
#{...} - Message Expression
@{...} - Link (URL) Expression
~{...} - Fragment Expression


